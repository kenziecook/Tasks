my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
swirl()
library(swirl)#
swirl()
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args()
list.files()
args(list.files)
old.dir
args(list.files) <- old.dir
old.dir <- args(list.files)
old.dir <- getwd()
testdir <- dir.create()
dir.create() <- testdir
info()
dir.create() <- "testdir"
getwd() <- dir.creatw(testdir)
getwd() <- dir.create(testdir)
library (swirl)#
swirl()
dir.create(testdir)
dir.create(file.path"testdir")
dir.create(file.path("testdir"))
dir.create("testdir")
setwd() <- testdir
setwd() <- "testdir"
setwd("testdir")
file.create("mytest.R")
mytest.R
"mytest.R"
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R" <- "mytest2.R")
file.rename("mytest2.R)
file.rename("mytest.R")
"mytest2.R"
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R)
file.path("mytest3.R")
file.path("folder 1", "folder 2")
file.path("folder1", "folder2")
?dir.create
dir.create("testdir2") file.path("testdir3")
dir.create("testdir.2"), file.path("testdir.3")
dir.create("testdir.2") and file.path("testdir3")
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
:
`:`
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length()
length(30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along()
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
0
info()
main()
c(44, NA, 5, NA)
x <- c(44, NA, 5, NA)
x times 3
skip()
y <_ rnorm(1000)
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
skip()
my_na
is.na()
skip()
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
skip()
x(x[0])
skip()
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
skip()
c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
idental()
identical()
skip()
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
skip()
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
`?`
?matrix
skip()
identical(my matrix, my_matrix2)
identical("my_matrix", "my_martix2")
skip()
cbind(vector, my_matrix)
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class()
skip()
colnames(colname)
colnames(colnames)
colnames(my_data) <- cnames
my_data
TRUE
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
7 < 6
6 < 7
10 <= 10
5 == 7
5 != 7
skip()
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(7)
skip()
which(inst < 0)
any(inst < 0)
skip()
all(ints > 0)
Sys.Date()
mean() <- c(2, 4, 5)
skip()
boring_function('My first function!')
boring_function
submit()
skip()
my_mean(c(4, 5, 10))
submit()
skip()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
skip()
evaluate(c(1.4, 3.6, 7.9, 8.8))
skip()
evaluate(fnction(x){x=1}, 6)
evaluate(function(x){x+1}, 6)
skip()
?paste
paste("Programming", "is", "fun!")
submit()
skip()
submit()
list()
paste()
skip()
mad_libs
skip()
submit()
'Hello' '%p%' 'student'
skip()
'I', 'love', 'R!'
skip()
main()
data(cars)
help(cars)
head(data(cars))
head(cars)
plot(cars)
plot()
plot(help)
skip()
plot(x, y)
skip()
plot( x = cars$dist, y = cars$speed)
speed
skip()
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
skip()
plot(cars, sub = "My Plot Subtitle")
col = 2
plot(cars, col = 2)
xlim = c(10, 15)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
mtcars(data)
skip()
boxplot(help)
skip()
boxplot( = mpg ~ cyl, data = mtcars)
skip()
hist(mtcars$mpg)
x <- 56
5+7
